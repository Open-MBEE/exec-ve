const path = require('path')
const fs = require('fs')
const replace = require('replace-in-file');

const webpack = require('webpack')
const CopyPlugin = require('copy-webpack-plugin')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const FaviconsWebpackPlugin = require('favicons-webpack-plugin')

const hq = require('alias-hq');

const environment = require('./environment')

const packageJson = require("./package.json");
let sourceDir = './ve-custom'
let experimentalDir = './src/ve-experimental'


class WatchRunPlugin {
    apply(compiler) {
        compiler.hooks.watchRun.tap('WatchRun', (comp) => {
            if (comp.modifiedFiles) {
                const changedFiles = Array.from(comp.modifiedFiles, (file) => `\n  ${file}`).join('');
                console.log('');
                console.log('===============================');
                console.log('FILES CHANGED:', changedFiles);
                console.log('===============================');
            }
            if (comp.removedFiles) {
                const changedFiles = Array.from(comp.removedFiles, (file) => `\n  ${file}`).join('');
                console.log('');
                console.log('===============================');
                console.log('FILES REMOVED:', changedFiles);
                console.log('===============================');
            }
        });
    }
}

class SetupPlugin {
    constructor(mode) {
        this.mode = (mode === 'development') ? "-dev" : ""
        this.ran = false;
    }
    apply(compiler) {
        compiler.hooks.beforeCompile.tap('Setup',async(comp) =>{

            const configObj = await require(`./config/${process.env.VE_ENV}.json`)
            if (this.ran) {
                return;
            }
            this.ran = true;
            if (configObj.experimental) {
                const validExp = ['specTools', 'transclusions', 'presentations'];
                await fs.writeFile(`${experimentalDir}/index.ts`, '//** Automatically Generated by Webpack do not edit **//', (err) => {
                    if (err) {
                        throw err;
                    }}
                );
                for (let exp of configObj.experimental) {
                    // if (!configObj.ran) {
                    let expPath = `./${exp.id}`
                    if (exp.path) {
                        expPath = path.resolve(sourceDir, exp.path);
                    }

                    fs.appendFile(`${experimentalDir}/index.ts`,`\nimport '${expPath}'`, (err) => {
                        if (err) {
                            throw err;
                        }
                    });
                    if (!configObj.expConfig) {
                        configObj.expConfig = {};
                        for (let exp of validExp) {
                            configObj.expConfig[exp] = [];
                        }
                    }
                    let expConfPath = `${experimentalDir}/${exp.id}/config.json`
                    if (exp.config) {
                        expConfPath = exp.config
                    }
                    let expConf = await require(expConfPath)
                    for (let extType of validExp) {
                        if (expConf[extType] && expConf[extType].length > 0) {
                            for (let ec of expConf[extType]) {
                                configObj.expConfig[extType].push(ec);
                            }
                        }
                    }
                }
            }
            await packageJson
            configObj.version = `${packageJson.version}${this.mode}`;
            fs.mkdirSync('./dist/config', { recursive: true });
            fs.writeFile(__dirname + '/dist/config/config.json', JSON.stringify(configObj), (err) => {
                if (err) {
                    throw err;
                }
            });
        })
    }
}

module.exports = (env, argv) => {
    let ckPath = (argv.mode === 'development') ? "ckeditor" : "ckeditor"

    return {
        stats: 'verbose',
        experiments: {
            topLevelAwait: true
        },
        devtool: 'eval',
        entry: {
            veApp: {
                import: path.resolve(environment.paths.source, 'main.ts'),
            },
            // veDirectives: {
            //     import: './src/mms-directives/mms-directives.main.ts',
            //     dependOn: 'shared',
            // },
            // shared: [
            //     'angular',
            //     //'@uirouter/angularjs'
            // ],
        },

        optimization: {
            minimize: false,
        },
        output: {
            path: path.resolve(__dirname, 'dist'),
            filename: 'js/[name].bundle.js',
            assetModuleFilename: '[name][ext]',
            publicPath: '/',
        },
        watch: true,
        resolve: {
            modules: [path.resolve(__dirname, 'node_modules'), 'node_modules'],
            // Add '.ts' and '.tsx' as a resolvable extension.
            extensions: ['.webpack.js', '.web.js', '.ts', '.tsx', '.js'],
            alias: hq.get('webpack'),
            // alias: {
            //     buffer: 'buffer',
            // },
        },
        watchOptions: {
            aggregateTimeout: 300,
            poll: 300,
            ignored: ['**/node_modules/', '**/ckeditor-dev', '**/partials', '**/src/ve-experimental/index.ts'],
        },
        plugins: [
            new WatchRunPlugin(),
            new SetupPlugin(),
            new webpack.EnvironmentPlugin({
                VE_ENV: 'local',
            }),
            new HtmlWebpackPlugin({
                title: 'View Editor',
                template: path.resolve(environment.paths.source, 'index.ejs'),
                templateParameters: {
                    ckPath: ckPath
                }
            }),
            new FaviconsWebpackPlugin({
                logo: path.resolve(
                    __dirname,
                    'src/assets/icons/favicon-32.png'
                ),
                prefix: '',
                publicPath: '../favicons',
                outputPath: path.resolve(__dirname, 'dist/favicons'),
                inject: true,
            }),
            new MiniCssExtractPlugin({
                filename: 'css/[name].min.css',
            }),
            new webpack.ProvidePlugin({
                $: 'jquery',
                jQuery: 'jquery',
            }),
            new CopyPlugin({
                patterns: [
                    {
                        from: path.resolve(
                            __dirname,
                            'config',
                            `config.js`
                        ),
                        to: path.resolve(
                            environment.paths.output,
                            'config',
                            'config.js'
                        ),
                    },
                    {
                        from: path.resolve(
                            environment.paths.source,
                            'partials'
                        ),
                        to: path.resolve(environment.paths.output, 'partials'),
                    },
                    {
                        from: path.resolve(
                            environment.paths.source, 'lib', ckPath
                        ),
                        to: path.resolve(environment.paths.output, ckPath)
                    },
                    {
                        from: path.resolve(
                            environment.paths.source, 'lib', 'ckeditor-plugins'
                        ),
                        to: path.resolve(environment.paths.output, ckPath, 'plugins')
                    },
                    {
                        from: path.resolve(
                            './node_modules', 'jquery', 'dist', 'jquery.js'
                        ),
                        to: path.resolve(environment.paths.output, 'js', 'jquery.js')
                    },
                    {
                        from: path.resolve(
                            environment.paths.source, 'errors'
                        ),
                        to: path.resolve(environment.paths.output, 'errors')
                    }
                ],
            }),
        ],
        module: {
            rules: [
                {
                    test: /\.(png|jpg|gif|svg)$/,
                    type: 'asset/resource',
                    generator: {
                        filename: 'img/[name][ext]',
                    },
                },
                {
                    test: /.(ttf|otf|eot|woff(2)?)(\?[a-z0-9]+)?$/,
                    type: 'asset/resource',
                    generator: {
                        filename: 'fonts/[name][ext]',
                    },
                },
                {
                    test: /\.s[ac]ss$/i,
                    use: [
                        MiniCssExtractPlugin.loader,
                        // Translates CSS into CommonJS
                        {
                            loader: 'css-loader',
                            options: {
                                sourceMap: true,
                            },
                        },

                        'resolve-url-loader',
                        // Compiles Sass to CSS
                        {
                            loader: 'sass-loader',
                            options: {
                                sourceMap: true,
                            },
                        },
                    ],
                },
                // all files with a '.ts' or '.tsx' extension will be handled by 'ts-loader'
                { test: /\.tsx?$/, loader: 'ts-loader' },
            ],
        },
    }
}
