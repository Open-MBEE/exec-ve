@use "../../bootstrap-variables" as bootstrap;
@use "./clearfix";
@use "sass:math";

// Grid system

// Generate semantic grid columns with these mixins.

// Centered container element
@mixin container-fixed($gutter: bootstrap.$grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left: math.floor(($gutter / 2));
  padding-right: math.ceil(($gutter / 2));

  @include clearfix.clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: bootstrap.$grid-gutter-width) {
  margin-left: math.ceil(($gutter / -2));
  margin-right: math.floor(($gutter / -2));

  @include clearfix.clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: bootstrap.$grid-gutter-width) {
  position: relative;
  float: left;
  width: math.percentage(($columns / bootstrap.$grid-columns));
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
}

@mixin make-xs-column-offset($columns) {
  margin-left: math.percentage(($columns / bootstrap.$grid-columns));
}

@mixin make-xs-column-push($columns) {
  left: math.percentage(($columns / bootstrap.$grid-columns));
}

@mixin make-xs-column-pull($columns) {
  right: math.percentage(($columns / bootstrap.$grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: bootstrap.$grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: bootstrap.$screen-sm-min) {
    float: left;
    width: math.percentage(($columns / bootstrap.$grid-columns));
  }
}

@mixin make-sm-column-offset($columns) {
  @media (min-width: bootstrap.$screen-sm-min) {
    margin-left: math.percentage(($columns / bootstrap.$grid-columns));
  }
}

@mixin make-sm-column-push($columns) {
  @media (min-width: bootstrap.$screen-sm-min) {
    left: math.percentage(($columns / bootstrap.$grid-columns));
  }
}

@mixin make-sm-column-pull($columns) {
  @media (min-width: bootstrap.$screen-sm-min) {
    right: math.percentage(($columns / bootstrap.$grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: bootstrap.$grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: bootstrap.$screen-md-min) {
    float: left;
    width: math.percentage(($columns / bootstrap.$grid-columns));
  }
}

@mixin make-md-column-offset($columns) {
  @media (min-width: bootstrap.$screen-md-min) {
    margin-left: math.percentage(($columns / bootstrap.$grid-columns));
  }
}

@mixin make-md-column-push($columns) {
  @media (min-width: bootstrap.$screen-md-min) {
    left: math.percentage(($columns / bootstrap.$grid-columns));
  }
}

@mixin make-md-column-pull($columns) {
  @media (min-width: bootstrap.$screen-md-min) {
    right: math.percentage(($columns / bootstrap.$grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: bootstrap.$grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: bootstrap.$screen-lg-min) {
    float: left;
    width: math.percentage(($columns / bootstrap.$grid-columns));
  }
}

@mixin make-lg-column-offset($columns) {
  @media (min-width: bootstrap.$screen-lg-min) {
    margin-left: math.percentage(($columns / bootstrap.$grid-columns));
  }
}

@mixin make-lg-column-push($columns) {
  @media (min-width: bootstrap.$screen-lg-min) {
    left: math.percentage(($columns / bootstrap.$grid-columns));
  }
}

@mixin make-lg-column-pull($columns) {
  @media (min-width: bootstrap.$screen-lg-min) {
    right: math.percentage(($columns / bootstrap.$grid-columns));
  }
}
